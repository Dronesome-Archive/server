import logging
from flask import Flask
from werkzeug.middleware.proxy_fix import ProxyFix

import app.drones
from app.exts import oauth, login, socketio
from app.blueprints import blueprints

# GENERAL GUIDELINES:
# 1. Design the frontend so that an unsuspecting user can't generate faulty input.
# 2. Only catch errors generated by faulty user input and return a generic error message.
# 3. Don't catch potential errors from our own API or database.
# 4. For naming, only use 'state', never 'status'
# 5. For UI text use double quotes, for internal strings use single quotes

def init_log(flask_app):
	# https://docs.python.org/3/library/logging.html#logrecord-attributes
	# https://docs.python.org/3/library/string.html#format-string-syntax
	formatter = logging.Formatter('[{levelname:4.4} {asctime}]\t{message}', style='{', datefmt='%Y-%m-%d %H:%M:%S')
	handler = logging.StreamHandler()
	handler.setFormatter(formatter)
	flask_app.logger.removeHandler(flask_app.logger.handlers[0])
	flask_app.logger.addHandler(handler)
	flask_app.logger.setLevel(logging.INFO)

def init_exts(flask_app):
	flask_app.wsgi_app = ProxyFix(flask_app.wsgi_app)
	oauth.init_app(flask_app)
	for server in flask_app.config['OAUTH_SERVERS']:
		oauth.register(server)
	login.init_app(flask_app)
	socketio.init_app(flask_app)


def register_blueprints(flask_app):
	for blueprint in blueprints:
		flask_app.register_blueprint(blueprint)


def create_app(config_objects):
	flask_app = Flask(__name__)
	for obj in config_objects:
		flask_app.config.from_object(obj)
	init_log(flask_app)
	init_exts(flask_app)
	app.drones.init()
	register_blueprints(flask_app)
	return flask_app
